#! /usr/bin/perl 
# This file is part of MachDB.  For license info, read LICENSE
#
# $Id: gather.Linux.ppc 6760 2007-12-17 15:46:29Z stpierre $

use strict;
use XML::Simple qw(:strict);
use Data::Dumper;

# must be run as root
`id -u` == 0 || die "must be run as root";

my $XMLFILE = "/usr/local/machdb/host.xml";

##############################################
# Main
##############################################
my $host;
my %name;
my %cpuinfo;
my %meminfo;
my %scsi;
my %nic;
my %os;
my %packages;


# 1st argument can be user, 2nd a comment
if ($ARGV[0]) {
    $host->{user} = $ARGV[0];
    $host->{comment} = $ARGV[1];
}

getcpuinfo();
getmeminfo();
gethostname();
getdiskinfo();
getnetinfo();
getmounts();
getosinfo();
getrpmpackages();
getpcihardware();
getdfg();
getbios();
getsystem();
getmboard();
getchassis();
printxml();


##############################################
# Functions
##############################################

##############################################
# Print Out XML
##############################################
sub printxml {
    open (XMLFILE,">$XMLFILE") or die "Couldn't open $XMLFILE: $!";
    print XMLFILE XMLout($host,KeyAttr => [],noattr => 1,xmldecl => '<?xml version="1.0"?>',RootName => 'host');
    close (XMLFILE);
}
##############################################


##############################################
## get system info
##############################################

sub getsystem {
    my ($vendor,$name,$version,$serial,$uuid);
}
##############################################


##############################################
## get chassis
##############################################

sub getchassis {
    my ($vendor,$serial,$asset_tag,$type);
}

##############################################


##############################################
## get mboard
##############################################

sub getmboard {
    my ($vendor,$name,$version,$serial);
    open(CPUINFO,"/proc/cpuinfo");
    while (<CPUINFO>) {
	chomp;                  # no newline
	s/#.*//;                # no comments
	    s/^\s+//;               # no leading white
	s/\s+$//;               # no trailing white
	next unless length;     # anything left?
	my ($var, $value) = split(/\s*:\s*/, $_, 2);
	$cpuinfo{$var} = $value;
    }
    close(CPUINFO);
    
    $host->{motherboard}{name} = $cpuinfo{"motherboard"};
    if ($host->{motherboard}{name} =~ /Macintosh/) {
	$host->{motherboard}{vendor} = "Apple";
    }
}

##############################################


##############################################
## get bios info
##############################################

sub getbios {
    my ($vendor,$version,$date);
}

##############################################



##############################################
## get hostname info
##############################################
sub gethostname {
    my $hostname = `/bin/hostname`;
    chomp($hostname);
    $hostname =~ s/\..*//g;
    my $domainname = `/bin/dnsdomainname`;
    chomp($domainname);
    $name{domainname} = $domainname;
    $name{hostname} = $hostname;
    close(MEMINFO);
    # hostname info
    $host->{domain} = $name{"domainname"};
    $host->{hostname} = $name{"hostname"};
} 

##############################################
## get info from cpu
##############################################
sub getcpuinfo {
    my ($speed,$version);
    open(CPUINFO,"/proc/cpuinfo");
    while (<CPUINFO>) {
	chomp;                  # no newline
	s/#.*//;                # no comments
	s/^\s+//;               # no leading white
	s/\s+$//;               # no trailing white
	next unless length;     # anything left?
	my ($var, $value) = split(/\s*:\s*/, $_, 2);
	$cpuinfo{$var} = $value;
    }
    close(CPUINFO);

    $cpuinfo{"processor"} ++;
    # cpu info
    $host->{cpu}{name} = qq($cpuinfo{"platform"} $cpuinfo{"cpu"});
    $host->{cpu}{count}	=	$cpuinfo{"processor"};
    $host->{cpu}{speed}	=	$cpuinfo{"speed"};
    $host->{cpu}{speed} =~ 	s/\..*//g;
    $host->{cpu}{cache}	=	$cpuinfo{"L2 cache"};
    if ($host->{cpu}{cache} =~ /unified/) {
	$host->{cpu}{unified_cache} = 1;
    }
    $host->{cpu}{cache} =~ 	s/\s?K.*//g;
}


##############################################
## get info from memory
##############################################
sub getmeminfo {
    my ($memtotal,$swaptotal);
    
    open(MEMINFO,"/proc/meminfo");
    while (<MEMINFO>) {
	chomp;                  # no newline
	s/#.*//;                # no comments
	s/^\s+//;               # no leading white
	s/\s+$//;               # no trailing white
	s/\s+kB$//;             # remove kB
	next unless length;     # anything left?
	my ($var, $value) = split(/\s*:\s*/, $_, 2);
	$meminfo{$var} = $value;
    }
    close(MEMINFO);

    $swaptotal = $meminfo{"SwapTotal"};
    $swaptotal = $swaptotal / 1024 + 1;
    ($swaptotal,undef) = split(/\./,$swaptotal);

    $memtotal = $meminfo{"MemTotal"};
    $memtotal = $memtotal / 1024 + 1;
    ($memtotal,undef) = split(/\./,$memtotal);

    # memory info
    $host->{memory}{memtotal} = $memtotal;
    $host->{memory}{swaptotal} = $swaptotal;
} 


##############################################
## get disk info
##############################################
sub getdiskinfo {
    my @disks;
    my ($idesize, $idemodel,@ides);
    opendir(PROCIDE,"/proc/ide");
    my @idehds = grep /^hd.*$/, readdir(PROCIDE);
    closedir(PROCIDE);
    chomp(@idehds);
    for my $hd (@idehds) {
	my %ide;
	open(HDMODEL,"/proc/ide/$hd/model");
	$idemodel = <HDMODEL>;
	close(HDMODEL);
	chomp($idemodel);
	open(HDSIZE,"/proc/ide/$hd/capacity");
	$idesize = <HDSIZE>;
	close(HDSIZE);
	chomp($idesize);
	$idesize = $idesize / 2;

	$ide{type} = "ide";
	$ide{device} = "/dev/" . $hd;
	$ide{size} = $idesize;
	$ide{model} = $idemodel;
	push(@disks,\%ide);
    }

    my ($scsisize, $scsimodel,@scsis);
    opendir(PROCSCSI,"/sys/block");
    my @scsihds = grep /^s.*$/, readdir(PROCSCSI);
    closedir(PROCSCSI);
    chomp(@scsihds);
    for my $hd (@scsihds) {
	my %scsi;
	open(HDMODEL,"/sys/block/$hd/device/model");
	$scsimodel = <HDMODEL>;
	close(HDMODEL);
	chomp($scsimodel);
	$scsimodel =~ s/\s+$//g;
	open(HDSIZE,"/sys/block/$hd/size");
	$scsisize = <HDSIZE>;
	close(HDSIZE);
	chomp($scsisize);
	$scsisize = $scsisize / 2;

	$scsi{type} = "scsi";
	$scsi{device} = "/dev/" . $hd;
	$scsi{size} = $scsisize;
	$scsi{model} = $scsimodel;
	push(@disks,\%scsi);
    }
    $host->{disk} = \@disks;
}

##############################################
## get network info
##############################################
sub getnetinfo {
    my (@nics);
    open (IFCONFIG,"/sbin/ifconfig -a |") || die "Cannot open /sbin/ifconfig";
    my ($macaddr,$ipaddr,$broadcast,$netmask,$ipv6addr,$interface);
    while (<IFCONFIG>) {	
	chomp();
	if (/^(\S+)/ ) {	
	    # we are in a device block
	    $interface = $1;
	    if (/.*\s+HWaddr\s+((\w{1,2}:){5}\w{1,2})/) {
		$macaddr = $1;
	    } 
	    if ($interface =~ /^eth0/) {
		$host->{hwid} = $macaddr;
	    }
	} elsif (/.*\s+inet addr:((\d{1,3}\.){3}\d{1,3})/) {
	    $ipaddr = $1;
	    if (/.*\s+Bcast:((\d{1,3}\.){3}\d{1,3})/) {
		$broadcast = $1;
	    }
	    if (/.*\s+Mask:((\d{1,3}\.){3}\d{1,3})/) {
		$netmask = $1;
	    }
	} elsif (/.*\s+inet6 addr: (\S+)\s+/) {
	    $ipv6addr = $1;
	} elsif ($interface =~ /^eth.*/) {
	    my %nic;
	    $nic{interface} = $interface if $interface;
	    $nic{macaddr} = $macaddr if $macaddr;
	    $nic{ipaddr} = $ipaddr if $ipaddr;
	    $nic{netmask} = $netmask if $netmask;
	    $nic{broadcast} = $broadcast if $broadcast;
	    push(@nics,\%nic);
	    undef $interface;
	    undef $macaddr;
	    undef $ipaddr;
	    undef $netmask;
	    undef $broadcast;
	}
    }
    close(IFCONFIG);
    $host->{nic} = \@nics;
}

##############################################
## get mounts
##############################################
sub getmounts {
    my (@dfoutput,$filesystem,$fssize,$mountpoint);
    my @filesystems;
    
    chomp(@dfoutput = `/bin/df -PT`);
    #chomp(my @dfoutput = `cat /tmp/ifconfig`);
    for my $line (@dfoutput) {
	if ($line =~ /^\// ) {
	    my %fs;
	    ($fs{device}, $fs{type}, $fs{size}, undef, undef, undef, $fs{mountpoint}) = split(/\s+/, $line);
	    push(@filesystems,\%fs);
	} 
    }
    $host->{filesystem} = \@filesystems;
}

##############################################
## get kernel
##############################################

sub getosinfo {
    chomp($host->{kernel} = `/bin/uname -sr`);
    chomp($host->{arch} = `/bin/uname -m`);
    chomp($host->{basearch} = `/bin/uname -i`);
    chomp($host->{osname} = `/bin/cat /etc/redhat-release`);
}

##############################################
## get PCI hardware
##############################################

sub getpcihardware {
    open(PIPE, "/sbin/lspci |") || die "Couldn't execute lspci";
    my @lines = <PIPE>;
    close(PIPE);
    
    foreach my $line (@lines) {
	chomp $line; 
	
	# get the graphics card type
	my ($type, $model) = split(/: /, $line);
	if($type =~ m/VGA/) {
	    $host->{pci}{video} = $model;
	} elsif($type =~ m/Ethernet/) {
	    $host->{pci}{net} = $model;
	} elsif($model =~ m/Ethernet/) {
	    $host->{pci}{net} = $model;
	} elsif($type =~ m/Multimedia/) {
	    $host->{pci}{audio} = $model;
	} elsif($type =~ m/USB/) {
	    $host->{pci}{usb} = $model;
	} elsif($type =~ m/1394/) {
	    $host->{pci}{firewire} = $model;
	} elsif($type =~ m/RAM/) {
	    $host->{pci}{ram} = $model;
	} elsif($type =~ m/IDE/) {
	    $host->{pci}{ide} = $model;
	} elsif($type =~ m/SCSI/) {
	    $host->{pci}{scsi} = $model;
	}
    }
}


sub getdfg {
    open(PIPE, "/sbin/route |") || die "Couldn't execute /sbin/route";
    my @lines = <PIPE>;
    close(PIPE);

    foreach my $line (@lines) {
	chomp $line;
	my ($dest, $dfg) = split(/\s+/, $line);
	if ($dest =~ m/efault/) {
	    $host->{dfg} = $dfg;
	}
    }
}

##############################################
## get packages
##############################################
sub getrpmpackages {
    my (@output,$filesystem,$fssize,$mountpoint);
    my @packages;
    
    open(PIPE, "rpm -qa --qf \"%{NAME}\t%{VERSION}-%{RELEASE}\t%{ARCH}\n\" |") || die "Couldn't execute rpm";
    my @lines = <PIPE>;
    close(PIPE);
    for my $line (@lines) {
	chomp($line);
	my %pkg;
	($pkg{name}, $pkg{version}, $pkg{arch}) = split(/\t/, $line);
	push(@packages,\%pkg);
	
    }
    $host->{package} = \@packages;
}
